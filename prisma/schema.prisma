generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(uuid())
  fullName       String
  email          String     @unique
  passwordHash   String
  phoneNumber    String?
  gender         String?  
  dateOfBirth    DateTime?
  role           Role       @default(USER)
  profilePhoto   String?
  createdAt      DateTime   @default(now())

  doctor         Doctor?
  appointments   Appointment[] @relation("UserAppointments")
  responses      UserResponse[]
  diaryEntries   DiaryEntry[]
  messagesSent   Message[]  @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")
  aiInsights     AIInsight[]
}

enum Role {
  USER
  DOCTOR
  ADMIN
}

model Doctor {
  id              String   @id
  user            User     @relation(fields: [id], references: [id], onDelete: Cascade)
  specialization  String
  qualifications  String?
  experienceYears Int
  bio             String?
  consultationFee Float
  availability    Json

  appointments    Appointment[] @relation("DoctorAppointments")
}

model Appointment {
  id             String   @id @default(uuid())
  user           User     @relation("UserAppointments", fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  doctor         Doctor   @relation("DoctorAppointments", fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId       String
  appointmentTime DateTime
  mode           AppointmentMode
  status         AppointmentStatus @default(PENDING)
  reason         String?
  createdAt      DateTime @default(now())
}

enum AppointmentMode {
  ONLINE
  OFFLINE
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Questionnaire {
  id          String         @id @default(uuid())
  title       String
  description String?
  createdAt   DateTime       @default(now())
  questions   Question[]     // One questionnaire can have many questions
  responses   UserResponse[] // User responses linked to this questionnaire
}

model Question {
  id              String        @id @default(uuid())
  questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
  questionnaireId String
  questionText    String
  category        String        // "d" for depression, "a" for anxiety, "s" for stress
  options         Json          // Store the options: ["0", "1", "2", "3"]
  order           Int           // To maintain the specific ordering of questions
}

model UserResponse {
  id              String        @id @default(uuid())
  userId          String        // Link to user
  questionnaireId String        // Reference to the questionnaire
  responses       Json          // Store user's responses in JSON format
  results         Json          // Store calculated scores and interpretation
  createdAt       DateTime      @default(now())
  User            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Questionnaire   Questionnaire @relation(fields: [questionnaireId], references: [id], onDelete: Cascade)
}


model DiaryEntry {
  id              String   @id @default(uuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  entryDate       DateTime
  content         String
  moodScore       Int?
  aiSummary       String?
  detectedEmotions String[]
  createdAt       DateTime @default(now())
}

model AIInsight {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  insightType   String
  content       String
  generatedAt   DateTime @default(now())
}

model Message {
  id        String   @id @default(uuid())
  sender    User     @relation("MessagesSent", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("MessagesReceived", fields: [receiverId], references: [id])
  receiverId String
  message   String
  sentAt    DateTime @default(now())
}
